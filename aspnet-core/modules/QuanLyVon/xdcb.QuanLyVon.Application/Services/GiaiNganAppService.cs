using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using xdcb.QuanLyVon.GiaiNgan.Dtos;

namespace xdcb.QuanLyVon.GiaiNgans
{
    /// <summary>
    /// Generated AppService for Table : GiaiNgan.
    /// </summary>
    public class GiaiNganAppService : QuanLyVonAppServiceBase, IGiaiNganAppService
    {
        #region Property

        private readonly string strQuy = "QUY";
        private readonly string strNam = "NAM";
        private readonly string strThang = "THANG";
        private readonly string strDaGui = "DA_GUI";
        private readonly string strDangSoan = "DANG_SOAN";

        #endregion Property
        #region Generated By Column

        private readonly IGiaiNganRepository _iGiaiNganRepository;

        public GiaiNganAppService(IGiaiNganRepository iGiaiNganRepository)
        {
            _iGiaiNganRepository = iGiaiNganRepository;
        }

        public async Task<List<GiaiNganDto>> GetListAsync()
        {
            var items = await _iGiaiNganRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false).ToList();
            }
            return new List<GiaiNganDto>(ObjectMapper.Map<List<GiaiNgan>, List<GiaiNganDto>>(items));
        }

        public async Task<GiaiNganDto> GetAsync(Guid id)
        {
            var items = await _iGiaiNganRepository.GetAsync(id);
            if (items != null && items.IsDeleted == true)
            {
                items = null;
            }
            return ObjectMapper.Map<GiaiNgan, GiaiNganDto>(items);
        }

        public async Task<GiaiNganDto> Create(CreateUpdateGiaiNganDto input)
        {
            var item = ObjectMapper.Map<CreateUpdateGiaiNganDto, GiaiNgan>(input);
            var data = await _iGiaiNganRepository.InsertAsync(item, true);
            return ObjectMapper.Map<GiaiNgan, GiaiNganDto>(data);
        }

        public async Task<GiaiNganDto> Update(Guid id, CreateUpdateGiaiNganDto input)
        {
            var item = await _iGiaiNganRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.Nam = input.Nam;
                item.QuyThang = input.QuyThang;
                item.ChuDauTuId = input.ChuDauTuId;
                item.IsKeHoachKeoDai = input.IsKeHoachKeoDai;
                item.TenKeHoach = input.TenKeHoach;
                item.TrangThai = input.TrangThai;
                item.TongGiaiNgan = input.TongGiaiNgan;
                item.NgayGui = input.NgayGui;
                var data = await _iGiaiNganRepository.UpdateAsync(item, true);
                return ObjectMapper.Map<GiaiNgan, GiaiNganDto>(data);
            }
            return ObjectMapper.Map<GiaiNgan, GiaiNganDto>(item);
        }

        public async Task Delete(Guid id)
        {
            var item = await _iGiaiNganRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.IsDeleted = true;
                await _iGiaiNganRepository.UpdateAsync(item, true);
            }
        }

        [HttpGet]
        [Route("/api/app/chuDauTu/{id}/giaiNgan")]
        public async Task<List<GiaiNganDto>> GetListByChuDauTuIdAsync(Guid id)
        {
            var items = await _iGiaiNganRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.ChuDauTuId == id).ToList();
            }
            return new List<GiaiNganDto>(ObjectMapper.Map<List<GiaiNgan>, List<GiaiNganDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/chuDauTu/{id}/giaiNgan")]
        public async Task DeleteByChuDauTuId(Guid id)
        {
            var items = await _iGiaiNganRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.ChuDauTuId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iGiaiNganRepository.UpdateAsync(o);
                });
            }
        }
        #endregion

        #region Extra property
        public async Task<List<GiaiNganDto>> GetSearchData(int nam, bool? isKeHoachKeoDai, Guid chuDauTuId)
        {
            List<GiaiNganDto> list = new List<GiaiNganDto>();
            var item = _iGiaiNganRepository.GetListAsync().GetAwaiter().GetResult().ToList();
            if (item != null && item.Count > 0)
            {
                list = ObjectMapper.Map<List<GiaiNgan>, List<GiaiNganDto>>(item);
                list = list.Where(x => x.IsDeleted == false
                                && (nam == 0 || x.Nam == nam)
                                && (isKeHoachKeoDai == null || x.IsKeHoachKeoDai == isKeHoachKeoDai)
                                && (chuDauTuId == Guid.Empty || x.ChuDauTuId == chuDauTuId)).OrderBy(x => x.OrderIndex).ToList();
                list.ForEach(o =>
                {
                    if (o.TenKeHoach.ToString() == strQuy.ToString())
                    {
                        o.KeHoachGiaiNgan = "Quý " + o.QuyThang.ToString();
                    }
                    else if (o.TenKeHoach.ToString() == strThang.ToString())
                    {
                        o.KeHoachGiaiNgan = "Tháng " + o.QuyThang.ToString();
                    }
                    else if (o.TenKeHoach.ToString() == strNam.ToString())
                    {
                        o.KeHoachGiaiNgan = "Năm " + o.Nam.ToString();
                    }
                });
            }
            return list;
        }

        public async Task<List<GiaiNganDto>> GetGroupData(int nam, bool? isKeHoachKeoDai, Guid chuDauTuId)
        {
            List<GiaiNganDto> list = new List<GiaiNganDto>();
            var item = GetSearchData(nam, isKeHoachKeoDai, chuDauTuId).GetAwaiter().GetResult();
            if (item != null && item.Count > 0)
            {
                list = item.Where(x => x.TrangThai.ToLower().Trim() != strDangSoan.ToLower().Trim()).ToList().GroupBy(x => new
                {
                    x.Nam,
                    x.TenKeHoach,
                    x.QuyThang,
                    x.KeHoachGiaiNgan,
                    x.IsKeHoachKeoDai
                }).Select(b => new GiaiNganDto
                {
                    Nam = b.Key.Nam,
                    TenKeHoach = b.Key.TenKeHoach,
                    QuyThang = b.Key.QuyThang,
                    KeHoachGiaiNgan = b.Key.KeHoachGiaiNgan,
                    IsKeHoachKeoDai = b.Key.IsKeHoachKeoDai,
                    CountChuDauTu = item.Where(x => x.Nam == b.Key.Nam
                                                 && x.TrangThai.ToLower().Trim() != strDangSoan.ToLower().Trim()
                                                 && x.KeHoachGiaiNgan == b.Key.KeHoachGiaiNgan).ToList().Select(x => x.ChuDauTuId).Distinct().ToList().Count(),
                    TongGiaiNgan = item.Where(x => x.Nam == b.Key.Nam
                                                 && x.TrangThai.ToLower().Trim() != strDangSoan.ToLower().Trim()
                                                 && x.KeHoachGiaiNgan == b.Key.KeHoachGiaiNgan).ToList().Sum(x => x.TongGiaiNgan)
                }).ToList();
            }
            return list;
        }

        public async Task<GiaiNganDto> GetNotificationIsNew(int nam, bool isKeHoachKeoDai, string tenKeHoach, int quyThang, Guid chuDauTuId)
        {
            GiaiNganDto dto = new GiaiNganDto();
            dto.Nam = nam;
            dto.IsKeHoachKeoDai = isKeHoachKeoDai;
            dto.TenKeHoach = tenKeHoach;
            dto.QuyThang = quyThang;
            dto.ChuDauTuId = chuDauTuId;
            dto.strNotification = _iGiaiNganRepository.GetNotificationIsNew(nam, isKeHoachKeoDai, tenKeHoach, quyThang, chuDauTuId).GetAwaiter().GetResult();
            return dto;
        }

        public async Task<List<int>> GetObjectYear()
        {
            List<int> listInt = new List<int>();
            var item = _iGiaiNganRepository.GetListAsync().GetAwaiter().GetResult().ToList();
            if (item != null && item.Count > 0)
            {
                int minNam = item.Select(x => x.Nam).Min();
                int maxNam = item.Select(x => x.Nam).Max();
                for (int i = minNam; i <= maxNam; i++)
                {
                    listInt.Add(i);
                }
            }
            return listInt;
        }

        [HttpGet]
        public async Task<PagedResultDto<GiaiNganDto>> SearchAsync(GiaiNganConditionSearch condition)
        {
            PagedResultDto<GiaiNganDto> listPagedResultDto = new PagedResultDto<GiaiNganDto>();
            List<GiaiNganDto> list = await GetSearchData(condition.Nam, condition.IsKeHoachKeoDai, condition.ChuDauTuId);
            if (list != null && list.Count > 0)
            {
                listPagedResultDto.Items = list.OrderByDescending(x => x.OrderIndex).Skip(condition.SkipCount).Take(condition.MaxResultCount).ToList();
                listPagedResultDto.TotalCount = list.Count();
            }
            return listPagedResultDto;
        }

        #endregion
    }
}