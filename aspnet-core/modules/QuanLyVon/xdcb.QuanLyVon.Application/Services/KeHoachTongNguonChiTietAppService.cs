using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using xdcb.QuanLyVon.KeHoachTongNguonChiTiet.Dtos;

namespace xdcb.QuanLyVon.KeHoachTongNguonChiTiets
{
    /// <summary>
    /// Generated AppService for Table : KeHoachTongNguonChiTiet.
    /// </summary>
    public class KeHoachTongNguonChiTietAppService : QuanLyVonAppServiceBase, IKeHoachTongNguonChiTietAppService
    {
        #region Generated By Column

        private readonly IKeHoachTongNguonChiTietRepository _iKeHoachTongNguonChiTietRepository;

        public KeHoachTongNguonChiTietAppService(IKeHoachTongNguonChiTietRepository iKeHoachTongNguonChiTietRepository)
        {
            _iKeHoachTongNguonChiTietRepository = iKeHoachTongNguonChiTietRepository;
        }

        public async Task<List<KeHoachTongNguonChiTietDto>> GetListAsync()
        {
            var items = await _iKeHoachTongNguonChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false).ToList();
            }
            return new List<KeHoachTongNguonChiTietDto>(ObjectMapper.Map<List<KeHoachTongNguonChiTiet>, List<KeHoachTongNguonChiTietDto>>(items));
        }

        public async Task<KeHoachTongNguonChiTietDto> GetAsync(Guid id)
        {
            var items = await _iKeHoachTongNguonChiTietRepository.GetAsync(id);
            if (items != null && items.IsDeleted == true)
            {
                items = null;
            }
            return ObjectMapper.Map<KeHoachTongNguonChiTiet, KeHoachTongNguonChiTietDto>(items);
        }

        public async Task<KeHoachTongNguonChiTietDto> Create(CreateUpdateKeHoachTongNguonChiTietDto input)
        {
            var item = ObjectMapper.Map<CreateUpdateKeHoachTongNguonChiTietDto, KeHoachTongNguonChiTiet>(input);
            var data = await _iKeHoachTongNguonChiTietRepository.InsertAsync(item, true);
            return ObjectMapper.Map<KeHoachTongNguonChiTiet, KeHoachTongNguonChiTietDto>(data);
        }

        public async Task<KeHoachTongNguonChiTietDto> Update(Guid id, CreateUpdateKeHoachTongNguonChiTietDto input)
        {
            var item = await _iKeHoachTongNguonChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.KeHoachTongNguonId = input.KeHoachTongNguonId;
                item.NguonVonId = input.NguonVonId;
                item.NguonVonChaId = input.NguonVonChaId;
                item.TenNguonVon = input.TenNguonVon;
                item.KeHoachDauNamTruoc = input.KeHoachDauNamTruoc;
                item.KeHoachBoSungNamTruoc = input.KeHoachBoSungNamTruoc;
                item.KeHoachDauNam = input.KeHoachDauNam;
                item.KeHoachDauNamDuocDuyet = input.KeHoachDauNamDuocDuyet;
                item.DieuChinhTang = input.DieuChinhTang;
                item.DieuChinhGiam = input.DieuChinhGiam;
                item.KeHoachBoSung = input.KeHoachBoSung;
                item.KeHoachBoSungDuocDuyet = input.KeHoachBoSungDuocDuyet;
                item.GhiChuSoDauNam = input.GhiChuSoDauNam;
                item.GhiChuSoDieuChinh = input.GhiChuSoDieuChinh;
                item.GhiChuUyBanDauNam = input.GhiChuUyBanDauNam;
                item.GhiChuUyBanDieuChinh = input.GhiChuUyBanDieuChinh;
                item.IsDeleteDieuChinh = input.IsDeleteDieuChinh;
                var data = await _iKeHoachTongNguonChiTietRepository.UpdateAsync(item, true);
                return ObjectMapper.Map<KeHoachTongNguonChiTiet, KeHoachTongNguonChiTietDto>(data);
            }
            return ObjectMapper.Map<KeHoachTongNguonChiTiet, KeHoachTongNguonChiTietDto>(item);
        }

        public async Task Delete(Guid id)
        {
            var item = await _iKeHoachTongNguonChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.IsDeleted = true;
                await _iKeHoachTongNguonChiTietRepository.UpdateAsync(item, true);
            }
        }

        [HttpGet]
        [Route("/api/app/keHoachTongNguon/{id}/keHoachTongNguonChiTiet")]
        public async Task<List<KeHoachTongNguonChiTietDto>> GetListByKeHoachTongNguonIdAsync(Guid id)
        {
            var items = await _iKeHoachTongNguonChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachTongNguonId == id).ToList();
            }
            return new List<KeHoachTongNguonChiTietDto>(ObjectMapper.Map<List<KeHoachTongNguonChiTiet>, List<KeHoachTongNguonChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/keHoachTongNguon/{id}/keHoachTongNguonChiTiet")]

        public async Task DeleteByKeHoachTongNguonId(Guid id)
        {
            var items = await _iKeHoachTongNguonChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachTongNguonId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachTongNguonChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/nguonVon/{id}/keHoachTongNguonChiTiet")]

        public async Task<List<KeHoachTongNguonChiTietDto>> GetListByNguonVonIdAsync(Guid id)
        {
            var items = await _iKeHoachTongNguonChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.NguonVonId == id).ToList();
            }
            return new List<KeHoachTongNguonChiTietDto>(ObjectMapper.Map<List<KeHoachTongNguonChiTiet>, List<KeHoachTongNguonChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/nguonVon/{id}/keHoachTongNguonChiTiet")]

        public async Task DeleteByNguonVonId(Guid id)
        {
            var items = await _iKeHoachTongNguonChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.NguonVonId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachTongNguonChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/nguonVonCha/{id}/keHoachTongNguonChiTiet")]

        public async Task<List<KeHoachTongNguonChiTietDto>> GetListByNguonVonChaIdAsync(Guid id)
        {
            var items = await _iKeHoachTongNguonChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.NguonVonChaId == id).ToList();
            }
            return new List<KeHoachTongNguonChiTietDto>(ObjectMapper.Map<List<KeHoachTongNguonChiTiet>, List<KeHoachTongNguonChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/nguonVonCha/{id}/keHoachTongNguonChiTiet")]
        public async Task DeleteByNguonVonChaId(Guid id)
        {
            var items = await _iKeHoachTongNguonChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.NguonVonChaId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachTongNguonChiTietRepository.UpdateAsync(o);
                });
            }
        }
        #endregion

        #region extra property
        [HttpPut]
        [Route("/api/app/keHoachTongNguonDieuChinhChiTiet/{id}")]
        public async Task DeleteKeHoachVonDieuChinhById(Guid id)
        {
            var item = await _iKeHoachTongNguonChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.DieuChinhTang = 0;
                item.DieuChinhGiam = 0;
                item.KeHoachBoSung = 0;
                item.KeHoachBoSungDuocDuyet = 0;
                item.GhiChuSoDieuChinh = string.Empty;
                item.GhiChuUyBanDieuChinh = string.Empty;
                item.IsDeleteDieuChinh = true;
                await _iKeHoachTongNguonChiTietRepository.UpdateAsync(item, true);
            }
        }
        #endregion
    }
}