using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using xdcb.QuanLyVon.KeHoachVonNSTChiTiet.Dtos;

namespace xdcb.QuanLyVon.KeHoachVonNSTChiTiets
{
    public class KeHoachVonNSTChiTietAppService : QuanLyVonAppServiceBase, IKeHoachVonNSTChiTietAppService
    {
        #region Generated By Column

        private readonly IKeHoachVonNSTChiTietRepository _iKeHoachVonNSTChiTietRepository;

        public KeHoachVonNSTChiTietAppService(IKeHoachVonNSTChiTietRepository iKeHoachVonNSTChiTietRepository)
        {
            _iKeHoachVonNSTChiTietRepository = iKeHoachVonNSTChiTietRepository;
        }

        public async Task<List<KeHoachVonNSTChiTietDto>> GetListAsync()
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false).ToList();
            }
            return new List<KeHoachVonNSTChiTietDto>(ObjectMapper.Map<List<KeHoachVonNSTChiTiet>, List<KeHoachVonNSTChiTietDto>>(items));
        }

        public async Task<KeHoachVonNSTChiTietDto> GetAsync(Guid id)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetAsync(id);
            if (items != null && items.IsDeleted == true)
            {
                items = null;
            }
            return ObjectMapper.Map<KeHoachVonNSTChiTiet, KeHoachVonNSTChiTietDto>(items);
        }

        public async Task<KeHoachVonNSTChiTietDto> Create(CreateUpdateKeHoachVonNSTChiTietDto input)
        {
            var item = ObjectMapper.Map<CreateUpdateKeHoachVonNSTChiTietDto, KeHoachVonNSTChiTiet>(input);
            var data = await _iKeHoachVonNSTChiTietRepository.InsertAsync(item, true);
            return ObjectMapper.Map<KeHoachVonNSTChiTiet, KeHoachVonNSTChiTietDto>(data);
        }

        public async Task<KeHoachVonNSTChiTietDto> Update(Guid id, CreateUpdateKeHoachVonNSTChiTietDto input)
        {
            var item = await _iKeHoachVonNSTChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.KeHoachVonNSTId = input.KeHoachVonNSTId;
                item.NhuCauKeHoachVonDauNam = input.NhuCauKeHoachVonDauNam;
                item.NhuCauKeHoachVonDieuChinh = input.NhuCauKeHoachVonDieuChinh;
                item.NhuCauKeHoachVonChiTietDauNamId = input.NhuCauKeHoachVonChiTietDauNamId;
                item.NhuCauKeHoachVonChiTietDieuChinhId = input.NhuCauKeHoachVonChiTietDieuChinhId;
                item.CongTrinhId = input.CongTrinhId;
                item.LoaiKhoanId = input.LoaiKhoanId;
                item.LuyKeVonNamTruoc = input.LuyKeVonNamTruoc;
                item.KeHoachVonDauNam = input.KeHoachVonDauNam;
                item.KeHoachVonDauNamDuocDuyet = input.KeHoachVonDauNamDuocDuyet;
                item.DieuChinhTang = input.DieuChinhTang;
                item.DieuChinhGiam = input.DieuChinhGiam;
                item.KeHoachVonDieuChinh = input.KeHoachVonDieuChinh;
                item.KeHoachVonDieuChinhDuocDuyet = input.KeHoachVonDieuChinhDuocDuyet;
                item.GhiChuSoDauNam = input.GhiChuSoDauNam;
                item.GhiChuUyBanDauNam = input.GhiChuUyBanDauNam;
                item.GhiChuSoDieuChinh = input.GhiChuSoDieuChinh;
                item.GhiChuUyBanDieuChinh = input.GhiChuUyBanDieuChinh;
                item.StringKeHoachVonDauNam = input.StringKeHoachVonDauNam;
                item.StringKeHoachVonDauNamDuocDuyet = input.StringKeHoachVonDauNamDuocDuyet;
                item.StringDieuChinhTang = input.StringDieuChinhTang;
                item.StringDieuChinhGiam = input.StringDieuChinhGiam;
                item.StringKeHoachVonDieuChinh = input.StringKeHoachVonDieuChinh;
                item.StringKeHoachVonDieuChinhDuocDuyet = input.StringKeHoachVonDieuChinhDuocDuyet;
                item.IsSelectDieuChinh = input.IsSelectDieuChinh;
                item.IsDeleteDieuChinh = input.IsDeleteDieuChinh;
                var data = await _iKeHoachVonNSTChiTietRepository.UpdateAsync(item, true);
                return ObjectMapper.Map<KeHoachVonNSTChiTiet, KeHoachVonNSTChiTietDto>(data);
            }
            return ObjectMapper.Map<KeHoachVonNSTChiTiet, KeHoachVonNSTChiTietDto>(item);
        }

        public async Task Delete(Guid id)
        {
            var item = await _iKeHoachVonNSTChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.IsDeleted = true;
                await _iKeHoachVonNSTChiTietRepository.UpdateAsync(item, true);
            }
        }

        [HttpGet]
        [Route("/api/app/keHoachVonNST/{id}/keHoachVonNSTChiTiet")]
        public async Task<List<KeHoachVonNSTChiTietDto>> GetListByKeHoachVonNSTIdAsync(Guid id)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTId == id).ToList();
            }
            return new List<KeHoachVonNSTChiTietDto>(ObjectMapper.Map<List<KeHoachVonNSTChiTiet>, List<KeHoachVonNSTChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/keHoachVonNST/{id}/keHoachVonNSTChiTiet")]
        public async Task DeleteByKeHoachVonNSTId(Guid id)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachVonNSTChiTietRepository.UpdateAsync(o);
                });
            }
        }

        [HttpGet]
        [Route("/api/app/congTrinh/{id}/keHoachVonNSTChiTiet")]
        public async Task<List<KeHoachVonNSTChiTietDto>> GetListByCongTrinhIdAsync(Guid id)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.CongTrinhId == id).ToList();
            }
            return new List<KeHoachVonNSTChiTietDto>(ObjectMapper.Map<List<KeHoachVonNSTChiTiet>, List<KeHoachVonNSTChiTietDto>>(items));
        }

        [HttpGet]
        [Route("/api/app/loaiKhoan/{id}/keHoachVonNSTChiTiet")]
        public async Task<List<KeHoachVonNSTChiTietDto>> GetListByLoaiKhoanIdAsync(Guid id)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.LoaiKhoanId == id).ToList();
            }
            return new List<KeHoachVonNSTChiTietDto>(ObjectMapper.Map<List<KeHoachVonNSTChiTiet>, List<KeHoachVonNSTChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/loaiKhoan/{id}/keHoachVonNSTChiTiet")]
        public async Task DeleteByLoaiKhoanId(Guid id)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.LoaiKhoanId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachVonNSTChiTietRepository.UpdateAsync(o);
                });
            }
        }

        [HttpDelete]
        [Route("/api/app/congTrinh/{id}/keHoachVonNSTChiTiet")]
        public async Task DeleteByCongTrinhId(Guid id)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.CongTrinhId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachVonNSTChiTietRepository.UpdateAsync(o);
                });
            }
        }
        #endregion

        #region ExtraProperty
        [HttpPut]
        [Route("/api/app/keHoachVonNSTDieuChinhChiTietById/{id}")]
        public async Task DeleteKeHoachVonNSTDieuChinhChiTietById(Guid id)
        {
            var item = await _iKeHoachVonNSTChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.DieuChinhTang = 0;
                item.DieuChinhGiam = 0;
                item.KeHoachVonDieuChinh = 0;
                item.KeHoachVonDieuChinhDuocDuyet = 0;
                item.GhiChuSoDieuChinh = string.Empty;
                item.GhiChuUyBanDieuChinh = string.Empty;
                item.StringDieuChinhGiam = string.Empty;
                item.StringDieuChinhTang = string.Empty;
                item.StringKeHoachVonDieuChinh = string.Empty;
                item.StringKeHoachVonDieuChinhDuocDuyet = string.Empty;
                item.NhuCauKeHoachVonDieuChinh = 0;
                item.NhuCauKeHoachVonChiTietDieuChinhId = Guid.Empty;
                item.IsDeleteDieuChinh = true;
                await _iKeHoachVonNSTChiTietRepository.UpdateAsync(item, true);
            }
        }

        [HttpPut]
        [Route("/api/app/keHoachVonNST/{id}keHoachVonNSTDieuChinhChiTiet")]
        public async Task DeleteDataDieuChinhByKeHoachVonNSTID(Guid id)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTId == id).ToList();
                items.ForEach(o =>
                {
                    o.DieuChinhGiam = 0;
                    o.DieuChinhTang = 0;
                    o.KeHoachVonDieuChinh = 0;
                    o.KeHoachVonDieuChinhDuocDuyet = 0;
                    o.GhiChuSoDieuChinh = string.Empty;
                    o.GhiChuUyBanDieuChinh = string.Empty;
                    o.StringDieuChinhGiam = string.Empty;
                    o.StringDieuChinhTang = string.Empty;
                    o.StringKeHoachVonDieuChinh = string.Empty;
                    o.StringKeHoachVonDieuChinhDuocDuyet = string.Empty;
                    o.IsDeleteDieuChinh = true;
                    o.NhuCauKeHoachVonDieuChinh = 0;
                    o.NhuCauKeHoachVonChiTietDieuChinhId = Guid.Empty;
                    _iKeHoachVonNSTChiTietRepository.UpdateAsync(o);
                });
            }
        }
        public async Task<List<KeHoachVonNSTChiTietDto>> GetDataLuyKeByNam(int nam)
        {
            var items = await _iKeHoachVonNSTChiTietRepository.GetDataLuyKeByNam(nam);
            return ObjectMapper.Map<List<KeHoachVonNSTChiTiet>, List<KeHoachVonNSTChiTietDto>>(items);
        }
        #endregion
    }
}
