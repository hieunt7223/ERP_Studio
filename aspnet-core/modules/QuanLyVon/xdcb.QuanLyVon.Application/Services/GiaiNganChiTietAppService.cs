using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using xdcb.QuanLyVon.GiaiNganChiTiet.Dtos;

namespace xdcb.QuanLyVon.GiaiNganChiTiets
{
    /// <summary>
    /// Generated AppService for Table : GiaiNganChiTiet.
    /// </summary>
    public class GiaiNganChiTietAppService : QuanLyVonAppServiceBase, IGiaiNganChiTietAppService
    {
        #region Generated By Column

        private readonly IGiaiNganChiTietRepository _iGiaiNganChiTietRepository;

        public GiaiNganChiTietAppService(IGiaiNganChiTietRepository iGiaiNganChiTietRepository)
        {
            _iGiaiNganChiTietRepository = iGiaiNganChiTietRepository;
        }

        public async Task<List<GiaiNganChiTietDto>> GetListAsync()
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false).ToList();
            }
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }

        public async Task<GiaiNganChiTietDto> GetAsync(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetAsync(id);
            if (items != null && items.IsDeleted == true)
            {
                items = null;
            }
            return ObjectMapper.Map<GiaiNganChiTiet, GiaiNganChiTietDto>(items);
        }

        public async Task<GiaiNganChiTietDto> Create(CreateUpdateGiaiNganChiTietDto input)
        {
            var item = ObjectMapper.Map<CreateUpdateGiaiNganChiTietDto, GiaiNganChiTiet>(input);
            var data = await _iGiaiNganChiTietRepository.InsertAsync(item, true);
            return ObjectMapper.Map<GiaiNganChiTiet, GiaiNganChiTietDto>(data);
        }

        public async Task<GiaiNganChiTietDto> Update(Guid id, CreateUpdateGiaiNganChiTietDto input)
        {
            var item = await _iGiaiNganChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.GiaiNganId = input.GiaiNganId;
                item.LoaiKhoanId = input.LoaiKhoanId;
                item.LoaiCongTrinhId = input.LoaiCongTrinhId;
                item.CongTrinhId = input.CongTrinhId;
                item.KeHoachVonNSTChiTietId = input.KeHoachVonNSTChiTietId;
                item.KeHoachVonNSTWChiTietId = input.KeHoachVonNSTWChiTietId;
                item.LuyKeVonNamNayNST = input.LuyKeVonNamNayNST;
                item.LuyKeGiaiNganNamNayNST = input.LuyKeGiaiNganNamNayNST;
                item.KeHoachVonNamTruocKeoDaiNST = input.KeHoachVonNamTruocKeoDaiNST;
                item.KeHoachVonNamNayNST = input.KeHoachVonNamNayNST;
                item.KhoiLuongThucHienNamNayNST = input.KhoiLuongThucHienNamNayNST;
                item.GiaiNganNamNayNST = input.GiaiNganNamNayNST;
                item.GiaiNganNamTruocKeoDaiNST = input.GiaiNganNamTruocKeoDaiNST;
                item.GhiChuNST = input.GhiChuNST;
                item.GhiChuChuyenVienNST = input.GhiChuChuyenVienNST;
                item.IsSelectNST = input.IsSelectNST;
                item.LuyKeVonNamNayNSTW = input.LuyKeVonNamNayNSTW;
                item.LuyKeGiaiNganNamNayNSTW = input.LuyKeGiaiNganNamNayNSTW;
                item.KeHoachVonNamTruocKeoDaiNSTW = input.KeHoachVonNamTruocKeoDaiNSTW;
                item.KeHoachVonNamNayNSTW = input.KeHoachVonNamNayNSTW;
                item.KhoiLuongThucHienNamNayNSTW = input.KhoiLuongThucHienNamNayNSTW;
                item.GiaiNganNamNayNSTW = input.GiaiNganNamNayNSTW;
                item.GiaiNganNamTruocKeoDaiNSTW = input.GiaiNganNamTruocKeoDaiNSTW;
                item.GhiChuNSTW = input.GhiChuNSTW;
                item.GhiChuChuyenVienNSTW = input.GhiChuChuyenVienNSTW;
                item.IsSelectNSTW = input.IsSelectNSTW;
                item.LuyKeVonNamNayODA = input.LuyKeVonNamNayODA;
                item.LuyKeGiaiNganNamNayODA = input.LuyKeGiaiNganNamNayODA;
                item.KeHoachVonNamTruocKeoDaiODA = input.KeHoachVonNamTruocKeoDaiODA;
                item.KeHoachVonNamNayODA = input.KeHoachVonNamNayODA;
                item.KhoiLuongThucHienNamNayODA = input.KhoiLuongThucHienNamNayODA;
                item.GiaiNganNamNayODA = input.GiaiNganNamNayODA;
                item.GiaiNganNamTruocKeoDaiODA = input.GiaiNganNamTruocKeoDaiODA;
                item.GhiChuODA = input.GhiChuODA;
                item.GhiChuChuyenVienODA = input.GhiChuChuyenVienODA;
                item.IsSelectODA = input.IsSelectODA;
                item.IsSelectDieuChinh = input.IsSelectDieuChinh;
                item.IsDeleteDieuChinh = input.IsDeleteDieuChinh;
                var data = await _iGiaiNganChiTietRepository.UpdateAsync(item, true);
                return ObjectMapper.Map<GiaiNganChiTiet, GiaiNganChiTietDto>(data);
            }
            return ObjectMapper.Map<GiaiNganChiTiet, GiaiNganChiTietDto>(item);
        }

        public async Task Delete(Guid id)
        {
            var item = await _iGiaiNganChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.IsDeleted = true;
                await _iGiaiNganChiTietRepository.UpdateAsync(item, true);
            }
        }

        [HttpGet]
        [Route("/api/app/giaiNgan/{id}/giaiNganChiTiet")]
        public async Task<List<GiaiNganChiTietDto>> GetListByGiaiNganIdAsync(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.GiaiNganId == id).ToList();
            }
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/giaiNgan/{id}/giaiNganChiTiet")]
        public async Task DeleteByGiaiNganId(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.GiaiNganId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iGiaiNganChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/loaiKhoan/{id}/giaiNganChiTiet")]
        public async Task<List<GiaiNganChiTietDto>> GetListByLoaiKhoanIdAsync(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.LoaiKhoanId == id).ToList();
            }
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/loaiKhoan/{id}/giaiNganChiTiet")]
        public async Task DeleteByLoaiKhoanId(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.LoaiKhoanId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iGiaiNganChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/loaiCongTrinh/{id}/giaiNganChiTiet")]
        public async Task<List<GiaiNganChiTietDto>> GetListByLoaiCongTrinhIdAsync(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.LoaiCongTrinhId == id).ToList();
            }
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/loaiCongTrinh/{id}/giaiNganChiTiet")]
        public async Task DeleteByLoaiCongTrinhId(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.LoaiCongTrinhId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iGiaiNganChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/congTrinh/{id}/giaiNganChiTiet")]
        public async Task<List<GiaiNganChiTietDto>> GetListByCongTrinhIdAsync(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.CongTrinhId == id).ToList();
            }
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/congTrinh/{id}/giaiNganChiTiet")]
        public async Task DeleteByCongTrinhId(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.CongTrinhId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iGiaiNganChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/keHoachVonNSTChiTiet/{id}/giaiNganChiTiet")]
        public async Task<List<GiaiNganChiTietDto>> GetListByKeHoachVonNSTChiTietIdAsync(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTChiTietId == id).ToList();
            }
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/keHoachVonNSTChiTiet/{id}/giaiNganChiTiet")]
        public async Task DeleteByKeHoachVonNSTChiTietId(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTChiTietId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iGiaiNganChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/keHoachVonNSTWChiTiet/{id}/giaiNganChiTiet")]
        public async Task<List<GiaiNganChiTietDto>> GetListByKeHoachVonNSTWChiTietIdAsync(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTWChiTietId == id).ToList();
            }
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/keHoachVonNSTWChiTiet/{id}/giaiNganChiTiet")]
        public async Task DeleteByKeHoachVonNSTWChiTietId(Guid id)
        {
            var items = await _iGiaiNganChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTWChiTietId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iGiaiNganChiTietRepository.UpdateAsync(o);
                });
            }
        }
        #endregion

        #region ExtraProperty
        public async Task<List<GiaiNganChiTietDto>> GetDataIsNew(int nam, Guid chuDauTuId)
        {
            var items = await _iGiaiNganChiTietRepository.GetDataIsNew(nam, chuDauTuId);
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }

        [HttpGet]
        [Route("/api/app/giaiNganChiTiet/dataDetailForTongHop")]
        public async Task<List<GiaiNganChiTietDto>> GetDataDetailForTongHop(int nam, string tenkehoach, int? quyThang, bool? isKeHoachKeoDai, Guid congTrinhId)
        {
            var items = await _iGiaiNganChiTietRepository.GetDataDetailForTongHop(nam, tenkehoach, quyThang, isKeHoachKeoDai, congTrinhId);
            return new List<GiaiNganChiTietDto>(ObjectMapper.Map<List<GiaiNganChiTiet>, List<GiaiNganChiTietDto>>(items));
        }
        #endregion
    }
}