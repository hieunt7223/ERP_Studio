using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using xdcb.QuanLyVon.NhuCauKeHoachVon.Dtos;

namespace xdcb.QuanLyVon.NhuCauKeHoachVons
{
    /// <summary>
    /// Generated AppService for Table : NhuCauKeHoachVon.
    /// </summary>
    public class NhuCauKeHoachVonAppService : QuanLyVonAppServiceBase, INhuCauKeHoachVonAppService
    {
        #region Property

        private readonly string strDauNam = "DAU_NAM";
        private readonly string strDieuChinh = "DIEU_CHINH";
        private readonly string strHangNam = "HANG_NAM";
        private readonly string strTrungHan = "TRUNG_HAN";
        private readonly string strDaGui = "DA_GUI";
        private readonly string strDangSoan = "DANG_SOAN";

        #endregion Property

        #region Generated By Column

        private readonly INhuCauKeHoachVonRepository _iNhuCauKeHoachVonRepository;

        public NhuCauKeHoachVonAppService(INhuCauKeHoachVonRepository iNhuCauKeHoachVonRepository)
        {
            _iNhuCauKeHoachVonRepository = iNhuCauKeHoachVonRepository;
        }

        public async Task<List<NhuCauKeHoachVonDto>> GetListAsync()
        {
            var items = await _iNhuCauKeHoachVonRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false).ToList();
            }
            return new List<NhuCauKeHoachVonDto>(ObjectMapper.Map<List<NhuCauKeHoachVon>, List<NhuCauKeHoachVonDto>>(items));
        }

        public async Task<NhuCauKeHoachVonDto> GetAsync(Guid id)
        {
            var items = await _iNhuCauKeHoachVonRepository.GetAsync(id);
            if (items != null && items.IsDeleted == true)
            {
                items = null;
            }
            return ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(items);
        }

        public async Task<NhuCauKeHoachVonDto> Create(CreateUpdateNhuCauKeHoachVonDto input)
        {
            var item = ObjectMapper.Map<CreateUpdateNhuCauKeHoachVonDto, NhuCauKeHoachVon>(input);
            var data = await _iNhuCauKeHoachVonRepository.InsertAsync(item, true);
            return ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(data);
        }

        public async Task<NhuCauKeHoachVonDto> Update(Guid id, CreateUpdateNhuCauKeHoachVonDto input)
        {
            var item = await _iNhuCauKeHoachVonRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.TuNam = input.TuNam;
                item.DenNam = input.DenNam;
                item.GiaiDoanNam = input.GiaiDoanNam;
                item.ChuDauTuID = input.ChuDauTuID;
                item.TenKeHoach = input.TenKeHoach;
                item.TrangThaiDauNam = input.TrangThaiDauNam;
                item.TrangThaiDieuChinh = input.TrangThaiDieuChinh;
                item.TongNhuCauVonDauNam = input.TongNhuCauVonDauNam;
                item.TongNhuCauVonDieuChinh = input.TongNhuCauVonDieuChinh;
                item.ThoiGianGuiBaoCaoDauNam = input.ThoiGianGuiBaoCaoDauNam;
                item.ThoiGianGuiBaoCaoDieuChinh = input.ThoiGianGuiBaoCaoDieuChinh;
                var data = await _iNhuCauKeHoachVonRepository.UpdateAsync(item, true);
                return ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(data);
            }
            return ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(item);
        }

        public async Task Delete(Guid id)
        {
            var item = await _iNhuCauKeHoachVonRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.IsDeleted = true;
                await _iNhuCauKeHoachVonRepository.UpdateAsync(item, true);
            }
        }

        [HttpGet]
        [Route("/api/app/chuDauTu/{id}/nhuCauKeHoachVon")]
        public async Task<List<NhuCauKeHoachVonDto>> GetListByChuDauTuIDAsync(Guid id)
        {
            var items = await _iNhuCauKeHoachVonRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.ChuDauTuID == id).ToList();
            }
            return new List<NhuCauKeHoachVonDto>(ObjectMapper.Map<List<NhuCauKeHoachVon>, List<NhuCauKeHoachVonDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/chuDauTu/{id}/nhuCauKeHoachVon")]
        public async Task DeleteByChuDauTuID(Guid id)
        {
            var items = await _iNhuCauKeHoachVonRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.ChuDauTuID == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iNhuCauKeHoachVonRepository.UpdateAsync(o);
                });
            }
        }

        #endregion Generated By Column

        #region Extra Property

        /// <summary>
        /// API lấy danh sách theo (loại kế hoạch, năm, chủ đầu tư,tên công trình)
        /// </summary>
        /// <param name="nam"></param>
        /// <param name="loaikehoach"></param>
        /// <param name="tenkehoach"></param>
        /// <param name="chuDauTuId"></param>
        /// <returns></returns>
        public async Task<List<NhuCauKeHoachVonDto>> GetSearchData(int nam, string loaikehoach, string tenkehoach, Guid chuDauTuId)
        {
            List<NhuCauKeHoachVonDto> list = new List<NhuCauKeHoachVonDto>();

            if (string.IsNullOrWhiteSpace(loaikehoach))
            {
                loaikehoach = "";
            }
            if (string.IsNullOrWhiteSpace(tenkehoach))
            {
                tenkehoach = "";
            }
            var item = _iNhuCauKeHoachVonRepository.GetListAsync().GetAwaiter().GetResult().ToList();
            if (item != null && item.Count > 0)
            {
                //HangNam-DauNam
                item.Where(x => x.IsDeleted == false
                            && x.TenKeHoach == "HANG_NAM"
                            && !string.IsNullOrWhiteSpace(x.TrangThaiDauNam)
                            && (nam == 0 || x.TuNam == nam)
                            && (chuDauTuId == Guid.Empty || x.ChuDauTuID == chuDauTuId)
                ).ToList().ForEach(o =>
                {
                    var dto = ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(o);
                    dto.LoaiKeHoach = "DAU_NAM";
                    dto.TongNhuCauVon = dto.TongNhuCauVonDauNam;
                    dto.TrangThai = dto.TrangThaiDauNam;
                    list.Add(dto);
                });

                //HangNam-DieuChinh
                item.Where(x => x.IsDeleted == false
                            && x.TenKeHoach == "HANG_NAM"
                            && !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh)
                            && (nam == 0 || x.TuNam == nam)
                            && (chuDauTuId == Guid.Empty || x.ChuDauTuID == chuDauTuId)
                ).ToList().ForEach(o =>
                {
                    var dto = ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(o);
                    dto.LoaiKeHoach = "DIEU_CHINH";
                    dto.TongNhuCauVon = dto.TongNhuCauVonDieuChinh;
                    dto.TrangThai = dto.TrangThaiDieuChinh;
                    list.Add(dto);
                });

                //TrungHan-DauNam
                item.Where(x => x.IsDeleted == false
                            && x.TenKeHoach == "TRUNG_HAN"
                            && !string.IsNullOrWhiteSpace(x.TrangThaiDauNam)
                            && (nam == 0 || (x.TuNam <= nam && x.DenNam >= nam))
                            && (chuDauTuId == Guid.Empty || x.ChuDauTuID == chuDauTuId)
                ).ToList().ForEach(o =>
                {
                    var dto = ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(o);
                    dto.LoaiKeHoach = "DAU_NAM";
                    dto.TongNhuCauVon = dto.TongNhuCauVonDauNam;
                    dto.TrangThai = dto.TrangThaiDauNam;
                    list.Add(dto);
                });

                //TrungHan-DieuChinh
                item.Where(x => x.IsDeleted == false
                            && x.TenKeHoach == "TRUNG_HAN"
                            && !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh)
                            && (nam == 0 || (Convert.ToInt32(x.GiaiDoanNam.Trim()) == nam))
                            && (chuDauTuId == Guid.Empty || x.ChuDauTuID == chuDauTuId)
                ).ToList().ForEach(o =>
                {
                    var dto = ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(o);
                    dto.LoaiKeHoach = "DIEU_CHINH";
                    dto.TongNhuCauVon = dto.TongNhuCauVonDieuChinh;
                    dto.TrangThai = dto.TrangThaiDieuChinh;
                    list.Add(dto);
                });

                list = list.Where(x => x.IsDeleted == false
                                && (loaikehoach == "" || x.LoaiKeHoach == loaikehoach)
                                && (tenkehoach == "" || x.TenKeHoach == tenkehoach)).ToList();
            }
            return list;
        }

        /// <summary>
        /// Kiểm tra điều kiện tạo mới
        /// </summary>
        /// <param name="tenKeHoach"></param>
        /// <param name="loaikehoach"></param>
        /// <param name="nam"></param>
        /// <returns></returns>
        public async Task<NhuCauKeHoachVonDto> GetNotificationIsNew(string tenKeHoach, string loaikehoach, int nam, Guid chuDauTuID)
        {
            NhuCauKeHoachVonDto dto = new NhuCauKeHoachVonDto();
            if (string.IsNullOrWhiteSpace(tenKeHoach))
            {
                dto.strNotification = "Vui lòng nhập tên kế hoạch!";
                return dto;
            }
            if (tenKeHoach.Trim().ToLower() != strHangNam.Trim().ToLower() &&
                tenKeHoach.Trim().ToLower() != strTrungHan.Trim().ToLower())
            {
                dto.strNotification = "Đã nhập sai tên kế hoạch,Vui lòng nhập lại!";
                return dto;
            }

            if (string.IsNullOrWhiteSpace(loaikehoach))
            {
                dto.strNotification = "Vui lòng nhập loại kế hoạch!";
                return dto;
            }
            if (loaikehoach.Trim().ToLower() != strDauNam.Trim().ToLower() &&
                loaikehoach.Trim().ToLower() != strDieuChinh.Trim().ToLower())
            {
                dto.strNotification = "Đã nhập sai loại kế hoạch,Vui lòng nhập lại!";
                return dto;
            }
            if (nam == 0)
            {
                dto.strNotification = "Vui lòng nhập năm kế hoạch!";
                return dto;
            }

            if (chuDauTuID == null || chuDauTuID == Guid.Empty)
            {
                dto.strNotification = "Vui lòng nhập ID chủ đầu tư!";
                return dto;
            }

            var item = _iNhuCauKeHoachVonRepository.GetListAsync().GetAwaiter().GetResult().ToList();
            if (item == null || item.Count == 0)
            {
                if (loaikehoach.Trim().ToLower() == strDieuChinh.Trim().ToLower())
                {
                    dto.strNotification = "Phải làm nhu cầu vốn đầu năm " + nam.ToString() + " mới được làm điều chỉnh!";
                    return dto;
                }
            }
            else
            {
                //Kiểm tra kế hoạch hằng năm
                if (tenKeHoach.Trim().ToLower() == strHangNam.Trim().ToLower())
                {
                    var itemHangNam = item.Where(x => x.IsDeleted == false
                                                   && x.ChuDauTuID == chuDauTuID
                                                   && x.TenKeHoach.Trim().ToLower() == strHangNam.Trim().ToLower()).ToList();
                    if (itemHangNam != null && itemHangNam.Count() > 0)
                    {
                        int minNam = itemHangNam.Select(x => x.TuNam).Min();
                        int maxNam = itemHangNam.Select(x => x.TuNam).Max();
                        int indexMax = itemHangNam.Select(x => x.OrderIndex).Max();

                        if (nam < maxNam)
                        {
                            dto.strNotification = "Nhu cầu vốn tạo sau phải có năm lớn hơn Nhu cầu vốn đã tạo trước đó!";
                            return dto;
                        }
                        if ((maxNam + 1) < nam)
                        {
                            dto.strNotification = "Phải tạo nhu cầu vốn năm " + (maxNam + 1).ToString() + " trước!";
                            return dto;
                        }
                        //Đầu năm
                        if (loaikehoach.Trim().ToLower() == strDauNam.Trim().ToLower())
                        {
                            if (itemHangNam.Where(x => x.TuNam == nam && !string.IsNullOrWhiteSpace(x.TrangThaiDauNam)).ToList().Count() > 0)
                            {
                                dto.strNotification = "Nhu cầu vốn đầu năm " + nam.ToString() + " đã được tạo trước đó!";
                                return dto;
                            }
                            if ((minNam <= (nam - 1)) && itemHangNam.Where(x => x.TuNam == (nam - 1) && !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh)).Count() > 0)
                            {
                                if (itemHangNam.Where(x => x.TuNam == (nam - 1) && !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh) && x.TrangThaiDieuChinh.Trim().ToLower() == strDaGui.Trim().ToLower()).Count() == 0)
                                {
                                    dto.strNotification = "Nhu cầu vốn điều chỉnh năm " + (nam - 1).ToString() + " phải có trạng thái 'Đã gửi'!";
                                    return dto;
                                }
                            }
                            //Lấy ID nhu cầu vốn năm trước
                            if (itemHangNam.Where(x => x.TuNam == (nam - 1)).ToList().Count > 0)
                            {
                                dto.IDNhuCauKeHoachVonLuyKe = itemHangNam.Where(x => x.TuNam == (nam - 1)).ToList().Select(x => x.Id).FirstOrDefault();
                            }
                        }
                        //Điều chỉnh
                        if (loaikehoach.Trim().ToLower() == strDieuChinh.Trim().ToLower())
                        {
                            if (itemHangNam.Where(x => x.TuNam == nam && !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh)).ToList().Count() > 0)
                            {
                                dto.strNotification = "Nhu cầu vốn điều chỉnh năm " + nam.ToString() + " đã được tạo trước đó!";
                                return dto;
                            }
                            if (itemHangNam.Where(x => x.TuNam == nam && !string.IsNullOrWhiteSpace(x.TrangThaiDauNam)).ToList().Count() == 0)
                            {
                                dto.strNotification = "Phải làm nhu cầu vốn đầu năm " + nam.ToString() + " mới được làm điều chỉnh!";
                                return dto;
                            }
                            if (itemHangNam.Where(x => x.TuNam == nam && !string.IsNullOrWhiteSpace(x.TrangThaiDauNam)
                                               && x.TrangThaiDauNam.Trim().ToLower() == strDaGui.Trim().ToLower()).ToList().Count() == 0)
                            {
                                dto.strNotification = "Nhu cầu vốn đầu năm " + nam.ToString() + " phải có trạng thái 'Đã gửi' mới có thể tạo Nhu cầu vốn điều chỉnh!";
                                return dto;
                            }
                            //Lấy dto nhu cầu vốn đầu năm
                            NhuCauKeHoachVon objnhuCauKeHoach = itemHangNam.Where(x => x.TuNam == nam && !string.IsNullOrWhiteSpace(x.TrangThaiDauNam) && x.TrangThaiDauNam.Trim().ToLower() == strDaGui.Trim().ToLower()).ToList().FirstOrDefault();
                            dto = ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(objnhuCauKeHoach);
                        }
                    }
                    else if (loaikehoach.Trim().ToLower() == strDieuChinh.Trim().ToLower())
                    {
                        dto.strNotification = "Phải làm nhu cầu vốn đầu năm " + nam.ToString() + " mới được làm điều chỉnh!";
                        return dto;
                    }
                }

                //Kiểm tra kế hoạch trung hạn
                else if (tenKeHoach.Trim().ToLower() == strTrungHan.Trim().ToLower())
                {
                    var itemTrungHan = item.Where(x => x.IsDeleted == false
                                                   && x.ChuDauTuID == chuDauTuID
                                                   && x.TenKeHoach.Trim().ToLower() == strTrungHan.Trim().ToLower());
                    if (itemTrungHan != null && itemTrungHan.Count() > 0)
                    {
                        int minNam = itemTrungHan.Select(x => x.TuNam).Min();
                        int maxNam = itemTrungHan.Select(x => x.DenNam).Max();
                        int indexMax = itemTrungHan.Select(x => x.OrderIndex).Max();
                        //Đầu năm
                        if (loaikehoach.Trim().ToLower() == strDauNam.Trim().ToLower())
                        {
                            if (minNam > nam)
                            {
                                dto.strNotification = "Giai đoạn năm tạo nhu cầu vốn trung hạn không được nhỏ hơn năm " + minNam.ToString() + "!";
                                return dto;
                            }
                            if (minNam <= nam && maxNam >= nam)
                            {
                                dto.strNotification = "Nhu cầu vốn tạo sau phải có năm lớn hơn Nhu cầu vốn đã tạo trước đó!";
                                return dto;
                            }
                        }
                        //Điều chỉnh
                        if (loaikehoach.Trim().ToLower() == strDieuChinh.Trim().ToLower())
                        {
                            int namDCMax = 0;
                            if (itemTrungHan.Where(x => !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh)).ToList().Count > 0)
                            {
                                namDCMax = itemTrungHan.Where(x => !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh)).Select(x => Convert.ToInt32(x.GiaiDoanNam.Trim())).Max();
                            }
                            if (namDCMax != 0 && namDCMax >= nam)
                            {
                                dto.strNotification = "Năm điều chỉnh trung hạn phải lớn hơn năm " + namDCMax.ToString();
                                return dto;
                            }
                            if (itemTrungHan.Where(x => !string.IsNullOrWhiteSpace(x.TrangThaiDauNam) && x.TuNam <= nam && x.DenNam >= nam).ToList().Count() == 0)
                            {
                                dto.strNotification = "Phải làm kế hoạch đầu năm mới được làm kế hoạch điều chỉnh";
                                return dto;
                            }
                        }
                        if (itemTrungHan.Where(x => !string.IsNullOrWhiteSpace(x.TrangThaiDauNam)
                                               && x.TrangThaiDauNam.Trim().ToLower() != strDaGui.Trim().ToLower()).ToList().Count() > 0)
                        {
                            dto.strNotification = "Nhu cầu vốn ở giai đoạn trước phải có trạng thái 'Đã gửi' mới có thể tạo Nhu cầu vốn mới!";
                            return dto;
                        }
                        else if (itemTrungHan.Where(x => !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh)
                                           && x.TrangThaiDieuChinh.Trim().ToLower() != strDaGui.Trim().ToLower()).ToList().Count() > 0)
                        {
                            dto.strNotification = "Nhu cầu vốn ở giai đoạn trước phải có trạng thái 'Đã gửi' mới có thể tạo Nhu cầu vốn mới!";
                            return dto;
                        }
                        //Lấy ID lũy kế
                        dto.IDNhuCauKeHoachVonLuyKe = itemTrungHan.Where(x => x.OrderIndex == indexMax).ToList().Select(x => x.Id).FirstOrDefault();
                    }
                    else if (loaikehoach.Trim().ToLower() == strDieuChinh.Trim().ToLower())
                    {
                        dto.strNotification = "Phải làm nhu cầu vốn trung hạn giai đoạn đầu năm mới được làm điều chỉnh!";
                        return dto;
                    }
                }
            }
            return dto;
        }

        /// <summary>
        /// Lấy danh sách năm hằng năm theo chủ đầu tư
        /// </summary>
        /// <param name="chuDauTuID"></param>
        /// <returns></returns>
        public async Task<List<int>> GetListNamByHangNam(Guid chuDauTuID)
        {
            List<int> listInt = new List<int>();
            var item = _iNhuCauKeHoachVonRepository.GetListAsync().GetAwaiter().GetResult().ToList();
            if (item != null && item.Count > 0)
            {
                var itemHangNam = item.Where(x => x.IsDeleted == false
                               && x.ChuDauTuID == chuDauTuID
                               && x.TenKeHoach.Trim().ToLower() == strHangNam.Trim().ToLower());
                if (itemHangNam != null && itemHangNam.Count() > 0)
                {
                    listInt = itemHangNam.Select(x => x.TuNam).Distinct().OrderBy(o => o).ToList();
                }
            }
            return listInt;
        }

        /// <summary>
        /// Xóa kế hoạch điều chỉnh theo ID
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPut]
        [Route("/api/app/nhuCauKeHoachVonDieuChinh/{id}")]
        public async Task DeleteDataDieuChinh(Guid id)
        {
            var item = await _iNhuCauKeHoachVonRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.TongNhuCauVonDieuChinh = 0;
                item.TrangThaiDieuChinh = string.Empty;
                await _iNhuCauKeHoachVonRepository.UpdateAsync(item, true);
            }
        }

        [HttpGet]
        public async Task<PagedResultDto<NhuCauKeHoachVonDto>> SearchAsync(NhuCauKeHoachVonConditionSearch condition)
        {
            PagedResultDto<NhuCauKeHoachVonDto> listPagedResultDto = new PagedResultDto<NhuCauKeHoachVonDto>();
            List<NhuCauKeHoachVonDto> listNhuCauKeHoachVon = await GetSearchData(condition.Nam, condition.Loaikehoach, condition.Tenkehoach, condition.ChuDauTuId);
            if (listNhuCauKeHoachVon != null && listNhuCauKeHoachVon.Count > 0)
            {
                listPagedResultDto.Items = listNhuCauKeHoachVon.OrderByDescending(x => x.OrderIndex).Skip(condition.SkipCount).Take(condition.MaxResultCount).ToList();
                listPagedResultDto.TotalCount = listNhuCauKeHoachVon.Count();
            }
            return listPagedResultDto;
        }

        /// <summary>
        /// Lấy danh sách năm hằng năm theo chủ đầu tư
        /// </summary>
        /// <param name="chuDauTuID"></param>
        /// <returns></returns>
        public async Task<List<int>> GetListNamByTrungHan(Guid chuDauTuID)
        {
            List<int> listInt = new List<int>();
            var item = _iNhuCauKeHoachVonRepository.GetListAsync().GetAwaiter().GetResult().ToList();
            if (item != null && item.Count > 0)
            {
                var itemHangNam = item.Where(x => x.IsDeleted == false
                               && x.ChuDauTuID == chuDauTuID
                               && x.TenKeHoach.Trim().ToLower() == strTrungHan.Trim().ToLower());
                if (itemHangNam != null && itemHangNam.Count() > 0)
                {
                    int minNam = itemHangNam.Select(x => x.TuNam).Min();
                    int maxNam = itemHangNam.Select(x => x.DenNam).Max();
                    for (int i = minNam; i <= maxNam; i++)
                    {
                        listInt.Add(i);
                    }
                }
            }
            return listInt;
        }

        public async Task<NhuCauKeHoachVonDto> GetDataTrungHanDauNam(int nam, Guid chuDauTuID)
        {
            NhuCauKeHoachVonDto dto = new NhuCauKeHoachVonDto();
            var item = _iNhuCauKeHoachVonRepository.GetListAsync().GetAwaiter().GetResult().ToList();
            if (item != null && item.Count > 0)
            {
                var itemDauNam = item.Where(x => x.IsDeleted == false
                                                   && x.ChuDauTuID == chuDauTuID
                                                   && !string.IsNullOrWhiteSpace(x.TrangThaiDauNam)
                                                   && x.TuNam <= nam
                                                   && x.DenNam >= nam
                                                   && x.TenKeHoach.Trim().ToLower() == strTrungHan.Trim().ToLower()).ToList();
                if (itemDauNam != null && itemDauNam.Count > 0)
                {
                    return ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(itemDauNam.FirstOrDefault());
                }
            }
            return dto;
        }

        /// <summary>
        /// Lấy list năm có trên hệ thống
        /// </summary>
        /// <returns></returns>
        public async Task<List<int>> GetObjectYear()
        {
            List<int> listInt = new List<int>();
            var item = _iNhuCauKeHoachVonRepository.GetListAsync().GetAwaiter().GetResult().ToList();
            if (item != null && item.Count > 0)
            {
                int minNam = item.Select(x => x.TuNam).Min();
                int maxNam = item.Select(x => x.DenNam).Max();
                for (int i = minNam; i <= maxNam; i++)
                {
                    listInt.Add(i);
                }
            }
            return listInt;
        }

        #endregion Extra Property

        /// <summary>
        /// Lấy dữ liệu tổng hợp nhu cầu vốn trên Desktop
        /// </summary>
        /// <param name="nam"></param>
        /// <param name="loaikehoach"></param>
        /// <param name="tenkehoach"></param>
        /// <returns></returns>
        public async Task<List<NhuCauKeHoachVonDto>> GetGroupData(int nam, string loaikehoach, string tenkehoach)
        {
            List<NhuCauKeHoachVonDto> list = new List<NhuCauKeHoachVonDto>();
            var item = GetSearchData(nam, loaikehoach, tenkehoach, Guid.Empty).GetAwaiter().GetResult();
            if (item != null && item.Count > 0)
            {
                list = item.Where(x => x.TrangThai.ToLower().Trim() != strDangSoan.ToLower().Trim()).ToList().GroupBy(x => new
                {
                    x.GiaiDoanNam,
                    x.TenKeHoach,
                    x.LoaiKeHoach,
                    x.DenNam
                }).Select(b => new NhuCauKeHoachVonDto
                {
                    GiaiDoanNam = b.Key.GiaiDoanNam,
                    TenKeHoach = b.Key.TenKeHoach,
                    LoaiKeHoach = b.Key.LoaiKeHoach,
                    DenNam = b.Key.DenNam,
                    CountChuDauTu = item.Where(x => x.GiaiDoanNam == b.Key.GiaiDoanNam
                                                 && x.TenKeHoach == b.Key.TenKeHoach
                                                 && x.TrangThai.ToLower().Trim() != strDangSoan.ToLower().Trim()
                                                 && x.LoaiKeHoach == b.Key.LoaiKeHoach).ToList().Select(x => x.ChuDauTuID).Distinct().ToList().Count(),

                    TongNhuCauVon = item.Where(x => x.GiaiDoanNam == b.Key.GiaiDoanNam
                                                 && x.TenKeHoach == b.Key.TenKeHoach
                                                 && x.TrangThai.ToLower().Trim() != strDangSoan.ToLower().Trim()
                                                 && x.LoaiKeHoach == b.Key.LoaiKeHoach).ToList().Sum(x => x.TongNhuCauVon)
                }).ToList();
            }
            return list;
        }

        /// <summary>
        /// get nhu cầu kế hoạch vốn theo năm
        /// </summary>
        /// <param name="Year">năm tạo kế hoạch vốn</param>
        /// <returns></returns>

        public async Task<NhuCauKeHoachVonDto> GetHangNambyYearAsync(int nam)
        {
            var item = await _iNhuCauKeHoachVonRepository.GetHangNambyYearAsync(nam);
            return ObjectMapper.Map<NhuCauKeHoachVon, NhuCauKeHoachVonDto>(item);
        }
    }
}