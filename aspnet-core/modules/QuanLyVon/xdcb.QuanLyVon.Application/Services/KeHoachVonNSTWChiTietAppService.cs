using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using xdcb.QuanLyVon.KeHoachVonNSTWChiTiet.Dtos;

namespace xdcb.QuanLyVon.KeHoachVonNSTWChiTiets
{
    /// <summary>
    /// Generated AppService for Table : KeHoachVonNSTWChiTiet.
    /// </summary>
    public class KeHoachVonNSTWChiTietAppService : QuanLyVonAppServiceBase, IKeHoachVonNSTWChiTietAppService
    {
        #region Generated By Column

        private readonly IKeHoachVonNSTWChiTietRepository _iKeHoachVonNSTWChiTietRepository;

        public KeHoachVonNSTWChiTietAppService(IKeHoachVonNSTWChiTietRepository iKeHoachVonNSTWChiTietRepository)
        {
            _iKeHoachVonNSTWChiTietRepository = iKeHoachVonNSTWChiTietRepository;
        }

        public async Task<List<KeHoachVonNSTWChiTietDto>> GetListAsync()
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false).ToList();
            }
            return new List<KeHoachVonNSTWChiTietDto>(ObjectMapper.Map<List<KeHoachVonNSTWChiTiet>, List<KeHoachVonNSTWChiTietDto>>(items));
        }

        public async Task<KeHoachVonNSTWChiTietDto> GetAsync(Guid id)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetAsync(id);
            if (items != null && items.IsDeleted == true)
            {
                items = null;
            }
            return ObjectMapper.Map<KeHoachVonNSTWChiTiet, KeHoachVonNSTWChiTietDto>(items);
        }

        public async Task<KeHoachVonNSTWChiTietDto> Create(CreateUpdateKeHoachVonNSTWChiTietDto input)
        {
            var item = ObjectMapper.Map<CreateUpdateKeHoachVonNSTWChiTietDto, KeHoachVonNSTWChiTiet>(input);
            var data = await _iKeHoachVonNSTWChiTietRepository.InsertAsync(item, true);
            return ObjectMapper.Map<KeHoachVonNSTWChiTiet, KeHoachVonNSTWChiTietDto>(data);
        }

        public async Task<KeHoachVonNSTWChiTietDto> Update(Guid id, CreateUpdateKeHoachVonNSTWChiTietDto input)
        {
            var item = await _iKeHoachVonNSTWChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.KeHoachVonNSTWId = input.KeHoachVonNSTWId;
                item.LoaiKhoanId = input.LoaiKhoanId;
                item.CongTrinhId = input.CongTrinhId;
                item.NhuCauKeHoachVonChiTietDauNamId = input.NhuCauKeHoachVonChiTietDauNamId;
                item.NhuCauKeHoachVonChiTietDieuChinhId = input.NhuCauKeHoachVonChiTietDieuChinhId;
                item.LuyKeVonTongCong = input.LuyKeVonTongCong;
                item.LuyKeVonNamTruoc = input.LuyKeVonNamTruoc;
                item.NhuCauKeHoachVonDauNam = input.NhuCauKeHoachVonDauNam;
                item.NhuCauKeHoachVonDieuChinh = input.NhuCauKeHoachVonDieuChinh;
                item.KeHoachVonDauNam = input.KeHoachVonDauNam;
                item.KeHoachVonDauNamDuocDuyet = input.KeHoachVonDauNamDuocDuyet;
                item.DieuChinhTang = input.DieuChinhTang;
                item.DieuChinhGiam = input.DieuChinhGiam;
                item.KeHoachVonDieuChinh = input.KeHoachVonDieuChinh;
                item.KeHoachVonDieuChinhDuocDuyet = input.KeHoachVonDieuChinhDuocDuyet;
                item.GhiChuSoDauNam = input.GhiChuSoDauNam;
                item.GhiChuUyBanDauNam = input.GhiChuUyBanDauNam;
                item.GhiChuSoDieuChinh = input.GhiChuSoDieuChinh;
                item.GhiChuUyBanDieuChinh = input.GhiChuUyBanDieuChinh;
                item.StringKeHoachVonDauNam = input.StringKeHoachVonDauNam;
                item.StringKeHoachVonDauNamDuocDuyet = input.StringKeHoachVonDauNamDuocDuyet;
                item.StringDieuChinhTang = input.StringDieuChinhTang;
                item.StringDieuChinhGiam = input.StringDieuChinhGiam;
                item.StringKeHoachVonDieuChinh = input.StringKeHoachVonDieuChinh;
                item.StringKeHoachVonDieuChinhDuocDuyet = input.StringKeHoachVonDieuChinhDuocDuyet;
                item.IsSelectDieuChinh = input.IsSelectDieuChinh;
                item.IsDeleteDieuChinh = input.IsDeleteDieuChinh;
                var data = await _iKeHoachVonNSTWChiTietRepository.UpdateAsync(item, true);
                return ObjectMapper.Map<KeHoachVonNSTWChiTiet, KeHoachVonNSTWChiTietDto>(data);
            }
            return ObjectMapper.Map<KeHoachVonNSTWChiTiet, KeHoachVonNSTWChiTietDto>(item);
        }

        public async Task Delete(Guid id)
        {
            var item = await _iKeHoachVonNSTWChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.IsDeleted = true;
                await _iKeHoachVonNSTWChiTietRepository.UpdateAsync(item, true);
            }
        }

        [HttpGet]
        [Route("/api/app/keHoachVonNSTW/{id}/keHoachVonNSTWChiTiet")]
        public async Task<List<KeHoachVonNSTWChiTietDto>> GetListByKeHoachVonNSTWIdAsync(Guid id)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTWId == id).ToList();
            }
            return new List<KeHoachVonNSTWChiTietDto>(ObjectMapper.Map<List<KeHoachVonNSTWChiTiet>, List<KeHoachVonNSTWChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/keHoachVonNSTW/{id}/keHoachVonNSTWChiTiet")]
        public async Task DeleteByKeHoachVonNSTWId(Guid id)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTWId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachVonNSTWChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/loaiKhoan/{id}/keHoachVonNSTWChiTiet")]
        public async Task<List<KeHoachVonNSTWChiTietDto>> GetListByLoaiKhoanIdAsync(Guid id)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.LoaiKhoanId == id).ToList();
            }
            return new List<KeHoachVonNSTWChiTietDto>(ObjectMapper.Map<List<KeHoachVonNSTWChiTiet>, List<KeHoachVonNSTWChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/loaiKhoan/{id}/keHoachVonNSTWChiTiet")]
        public async Task DeleteByLoaiKhoanId(Guid id)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.LoaiKhoanId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachVonNSTWChiTietRepository.UpdateAsync(o);
                });
            }
        }
        [HttpGet]
        [Route("/api/app/congTrinh/{id}/keHoachVonNSTWChiTiet")]
        public async Task<List<KeHoachVonNSTWChiTietDto>> GetListByCongTrinhIdAsync(Guid id)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.CongTrinhId == id).ToList();
            }
            return new List<KeHoachVonNSTWChiTietDto>(ObjectMapper.Map<List<KeHoachVonNSTWChiTiet>, List<KeHoachVonNSTWChiTietDto>>(items));
        }

        [HttpDelete]
        [Route("/api/app/congTrinh/{id}/keHoachVonNSTWChiTiet")]
        public async Task DeleteByCongTrinhId(Guid id)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.CongTrinhId == id).ToList();
                items.ForEach(o =>
                {
                    o.IsDeleted = true;
                    _iKeHoachVonNSTWChiTietRepository.UpdateAsync(o);
                });
            }
        }
        #endregion

        #region ExtraProperty
        [HttpPut]
        [Route("/api/app/keHoachVonNSTWDieuChinhChiTietById/{id}")]
        public async Task DeleteKeHoachVonNSTWDieuChinhChiTietById(Guid id)
        {
            var item = await _iKeHoachVonNSTWChiTietRepository.GetAsync(id);
            if (item != null && item.IsDeleted == false)
            {
                item.DieuChinhTang = 0;
                item.DieuChinhGiam = 0;
                item.KeHoachVonDieuChinh = 0;
                item.KeHoachVonDieuChinhDuocDuyet = 0;
                item.GhiChuSoDieuChinh = string.Empty;
                item.GhiChuUyBanDieuChinh = string.Empty;
                item.StringDieuChinhGiam = string.Empty;
                item.StringDieuChinhTang = string.Empty;
                item.StringKeHoachVonDieuChinh = string.Empty;
                item.StringKeHoachVonDieuChinhDuocDuyet = string.Empty;
                item.NhuCauKeHoachVonDieuChinh = 0;
                item.NhuCauKeHoachVonChiTietDieuChinhId = Guid.Empty;
                item.IsDeleteDieuChinh = true;
                await _iKeHoachVonNSTWChiTietRepository.UpdateAsync(item, true);
            }
        }

        [HttpPut]
        [Route("/api/app/keHoachVonNSTW/{id}/keHoachVonNSTWDieuChinhChiTiet")]
        public async Task DeleteDataDieuChinhByKeHoachVonNSTWID(Guid id)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetListAsync();
            if (items != null && items.Count > 0)
            {
                items = items.Where(x => x.IsDeleted == false && x.KeHoachVonNSTWId == id).ToList();
                items.ForEach(o =>
                {
                    o.DieuChinhGiam = 0;
                    o.DieuChinhTang = 0;
                    o.KeHoachVonDieuChinh = 0;
                    o.KeHoachVonDieuChinhDuocDuyet = 0;
                    o.GhiChuSoDieuChinh = string.Empty;
                    o.GhiChuUyBanDieuChinh = string.Empty;
                    o.StringDieuChinhGiam = string.Empty;
                    o.StringDieuChinhTang = string.Empty;
                    o.StringKeHoachVonDieuChinh = string.Empty;
                    o.StringKeHoachVonDieuChinhDuocDuyet = string.Empty;
                    o.NhuCauKeHoachVonDieuChinh = 0;
                    o.NhuCauKeHoachVonChiTietDieuChinhId = Guid.Empty;
                    o.IsDeleteDieuChinh = true;
                    _iKeHoachVonNSTWChiTietRepository.UpdateAsync(o);
                });
            }
        }
        public async Task<List<KeHoachVonNSTWChiTietDto>> GetDataLuyKeByNam(int nam)
        {
            var items = await _iKeHoachVonNSTWChiTietRepository.GetDataLuyKeByNam(nam);
            return ObjectMapper.Map<List<KeHoachVonNSTWChiTiet>, List<KeHoachVonNSTWChiTietDto>>(items);
        }
        #endregion
    }
}