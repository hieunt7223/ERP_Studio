using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using xdcb.QuanLyVon.KeHoachVonNSTW.Dtos;

namespace xdcb.QuanLyVon.KeHoachVonNSTWs
{
	/// <summary>
	/// Generated AppService for Table : KeHoachVonNSTW.
	/// </summary>
	public class KeHoachVonNSTWAppService :QuanLyVonAppServiceBase, IKeHoachVonNSTWAppService
	{
		#region Generated By Column

		private readonly IKeHoachVonNSTWRepository _iKeHoachVonNSTWRepository;

		public KeHoachVonNSTWAppService(IKeHoachVonNSTWRepository iKeHoachVonNSTWRepository)
		{
			_iKeHoachVonNSTWRepository = iKeHoachVonNSTWRepository;
		}

		public async Task<List<KeHoachVonNSTWDto>> GetListAsync()
		{
			var items = await _iKeHoachVonNSTWRepository.GetListAsync();
			if (items != null && items.Count > 0)
			{
				    items = items.Where(x => x.IsDeleted == false).ToList();
			}
			return new List<KeHoachVonNSTWDto>(ObjectMapper.Map<List<KeHoachVonNSTW>, List<KeHoachVonNSTWDto>>(items));
		}

		public async Task<KeHoachVonNSTWDto> GetAsync(Guid id)
		{
			var items = await _iKeHoachVonNSTWRepository.GetAsync(id);
			if (items != null && items.IsDeleted==true)
			{
				items = null;
			}
			return ObjectMapper.Map<KeHoachVonNSTW, KeHoachVonNSTWDto>(items);
		}

		public async Task<KeHoachVonNSTWDto> Create(CreateUpdateKeHoachVonNSTWDto input)
		{
			var item = ObjectMapper.Map<CreateUpdateKeHoachVonNSTWDto, KeHoachVonNSTW>(input);
			var data = await _iKeHoachVonNSTWRepository.InsertAsync(item,true);
			return ObjectMapper.Map<KeHoachVonNSTW, KeHoachVonNSTWDto>(data);
		}

		public async Task<KeHoachVonNSTWDto> Update(Guid id, CreateUpdateKeHoachVonNSTWDto input)
		{
			var item = await _iKeHoachVonNSTWRepository.GetAsync(id);
			if (item != null && item.IsDeleted==false)
			{
			 item.Nam = input.Nam;
			 item.KeHoachVonDauNam = input.KeHoachVonDauNam;
			 item.KeHoachVonDauNamDuocDuyet = input.KeHoachVonDauNamDuocDuyet;
			 item.KeHoachVonDieuChinh = input.KeHoachVonDieuChinh;
			 item.KeHoachVonDieuChinhDuocDuyet = input.KeHoachVonDieuChinhDuocDuyet;
			 item.TrangThaiDauNam = input.TrangThaiDauNam;
			 item.TrangThaiDieuChinh = input.TrangThaiDieuChinh;
			 item.NgayBanHanhDauNam = input.NgayBanHanhDauNam;
			 item.NgayBanHanhDieuChinh = input.NgayBanHanhDieuChinh;
			 item.SoQuyetDinhDauNam = input.SoQuyetDinhDauNam;
			 item.SoQuyetDinhDieuChinh = input.SoQuyetDinhDieuChinh;
			 item.DinhKemFileDauNam = input.DinhKemFileDauNam;
			 item.DinhKemFileDieuChinh = input.DinhKemFileDieuChinh;
			var data = await _iKeHoachVonNSTWRepository.UpdateAsync(item, true);
			return ObjectMapper.Map<KeHoachVonNSTW, KeHoachVonNSTWDto>(data);
			}
		return ObjectMapper.Map<KeHoachVonNSTW, KeHoachVonNSTWDto>(item);
		}

		public async Task Delete(Guid id)
		{
			var item = await _iKeHoachVonNSTWRepository.GetAsync(id);
			if (item != null && item.IsDeleted==false)
			{
				item.IsDeleted = true;
				await _iKeHoachVonNSTWRepository.UpdateAsync(item, true);
			}
		}

		#endregion

		#region Property
		public async Task<List<KeHoachVonNSTWDto>> GetSearchData(int nam, string loaikehoach, string trangthai)
		{
			List<KeHoachVonNSTWDto> list = new List<KeHoachVonNSTWDto>();

			if (string.IsNullOrWhiteSpace(loaikehoach))
			{
				loaikehoach = "";
			}
			if (string.IsNullOrWhiteSpace(trangthai))
			{
				trangthai = "";
			}
			var item = _iKeHoachVonNSTWRepository.GetListAsync().GetAwaiter().GetResult().ToList();
			if (item != null && item.Count > 0)
			{
				//daunam
				item.Where(x => !string.IsNullOrWhiteSpace(x.TrangThaiDauNam)
							&& (nam == 0 || x.Nam == nam)
				).ToList().ForEach(o =>
				{
					var dto = ObjectMapper.Map<KeHoachVonNSTW, KeHoachVonNSTWDto>(o);
					dto.TrangThai = dto.TrangThaiDauNam;
					dto.DinhKemFile = dto.DinhKemFileDauNam;
					dto.NgayBanHanh = dto.NgayBanHanhDauNam;
					dto.DinhKemFile = dto.DinhKemFileDauNam;
					dto.SoQuyetDinh = dto.SoQuyetDinhDauNam;
					dto.KeHoachVonDieuChinh = 0;
					dto.KeHoachVonDieuChinhDuocDuyet = 0;
					dto.LoaiKeHoach = "DAU_NAM";
					list.Add(dto);
				});
				//dieuchinh
				item.Where(x => !string.IsNullOrWhiteSpace(x.TrangThaiDieuChinh)
							&& (nam == 0 || x.Nam == nam)
				).ToList().ForEach(o =>
				{
					var dto = ObjectMapper.Map<KeHoachVonNSTW, KeHoachVonNSTWDto>(o);
					dto.TrangThai = dto.TrangThaiDieuChinh;
					dto.DinhKemFile = dto.DinhKemFileDieuChinh;
					dto.NgayBanHanh = dto.NgayBanHanhDieuChinh;
					dto.DinhKemFile = dto.DinhKemFileDieuChinh;
					dto.SoQuyetDinh = dto.SoQuyetDinhDieuChinh;
					dto.LoaiKeHoach = "DIEU_CHINH";
					list.Add(dto);
				});

				list = list.Where(x => !string.IsNullOrWhiteSpace(x.LoaiKeHoach)
								&& (loaikehoach == "" || x.LoaiKeHoach == loaikehoach)
								&& (trangthai == "" || x.TrangThai == trangthai)).ToList();
			}
			return list;
		}
		[HttpPut]
		[Route("/api/app/KeHoachVonNSTWDieuChinh/{id}")]
		public async Task DeleteKeHoachVonNSTWDieuChinh(Guid id)
		{
			var item = await _iKeHoachVonNSTWRepository.GetAsync(id);
			if (item != null && item.IsDeleted == false)
			{
				item.TrangThaiDieuChinh = string.Empty;
				item.DinhKemFileDieuChinh = string.Empty;
				item.KeHoachVonDieuChinh = 0;
				item.KeHoachVonDieuChinhDuocDuyet = 0;
				item.NgayBanHanhDieuChinh = null;
				await _iKeHoachVonNSTWRepository.UpdateAsync(item, true);
			}
		}
		#endregion
	}
}